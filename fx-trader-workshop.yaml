AWSTemplateFormatVersion: '2010-09-09'
Description: 'Immersion Day Workshop Prerequisite - CloudFormation Template'
Parameters:
  FxTraderDatabaseName:
    Type: String
    MinLength: "4"
    Default: "fx_trader_database"
    Description: "FX Trader AWS Glue Database."
  FxTraderTableName:
    Type: String
    MinLength: "4"
    Default: "trades"
    Description: "FX Trader AWS Glue Table."
Mappings:
  CidrMappings:
    private-subnet-1: {CIDR: 10.0.3.0/24}
    private-subnet-2: {CIDR: 10.0.4.0/24}
    public-subnet-1: {CIDR: 10.0.1.0/24}
    public-subnet-2: {CIDR: 10.0.2.0/24}
    vpc: {CIDR: 10.0.0.0/16}
  DomainNameMappings:
    eu-west-1: {Domain: eu-west-1.compute.internal}
    eu-west-2: {Domain: eu-west-1.compute.internal}
    us-east-1: {Domain: ec2.internal}
    us-east-2: {Domain: us-east-2.compute.internal}
    us-west-1: {Domain: us-west-1.compute.internal}
    us-west-2: {Domain: us-west-2.compute.internal}
    eu-central-1: {Domain: eu-central-1.compute.internal}
Outputs:
  PrivateSubnet1:
    Description: The first private subnet.
    Value: {Ref: PrivateSubnet1}
  PrivateSubnet2:
    Description: The second private subnet.
    Value: {Ref: PrivateSubnet2}
  PublicSubnet1:
    Description: The first public subnet.
    Value: {Ref: PublicSubnet1}
  PublicSubnet2:
    Description: The second public subnet.
    Value: {Ref: PublicSubnet2}
  VPC:
    Description: The VPC Id.
    Value: {Ref: VPC}
  VpcCidr:
    Description: The CIDR block of the VPC.
    Value:
      Fn::FindInMap: [CidrMappings, vpc, CIDR]
Resources:
  AttachGateway:
    DependsOn: [VPC, InternetGateway]
    Properties:
      InternetGatewayId: {Ref: InternetGateway}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::VPCGatewayAttachment
  DHCPOptions:
    Properties:
      DomainName:
        Fn::FindInMap:
        - DomainNameMappings
        - {Ref: 'AWS::Region'}
        - Domain
      DomainNameServers: [AmazonProvidedDNS]
    Type: AWS::EC2::DHCPOptions
  EIP:
    Properties: {Domain: vpc}
    Type: AWS::EC2::EIP
  InternetGateway: {DependsOn: VPC, Type: 'AWS::EC2::InternetGateway'}
  NAT:
    DependsOn: AttachGateway
    Properties:
      AllocationId:
        Fn::GetAtt: [EIP, AllocationId]
      SubnetId: {Ref: PublicSubnet1}
    Type: AWS::EC2::NatGateway
  PrivateRoute:
    DependsOn: [PrivateRouteTable, NAT]
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: {Ref: NAT}
      RouteTableId: {Ref: PrivateRouteTable}
    Type: AWS::EC2::Route
  PrivateRouteTable:
    DependsOn: [VPC, AttachGateway]
    Properties:
      Tags:
      - {Key: Name, Value: PrivateRouteTable}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::RouteTable
  PrivateSubnet1:
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - {'Fn::GetAZs': ''}
      CidrBlock:
        Fn::FindInMap: [CidrMappings, private-subnet-1, CIDR]
      Tags:
      - {Key: Name, Value: PrivateSubnet1}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::Subnet
  PrivateSubnet1RouteTableAssociation:
    DependsOn: [PrivateRouteTable, PrivateSubnet1]
    Properties:
      RouteTableId: {Ref: PrivateRouteTable}
      SubnetId: {Ref: PrivateSubnet1}
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnet2:
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - {'Fn::GetAZs': ''}
      CidrBlock:
        Fn::FindInMap: [CidrMappings, private-subnet-2, CIDR]
      Tags:
      - {Key: Name, Value: PrivateSubnet2}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::Subnet
  PrivateSubnet2RouteTableAssociation:
    DependsOn: [PrivateRouteTable, PrivateSubnet2]
    Properties:
      RouteTableId: {Ref: PrivateRouteTable}
      SubnetId: {Ref: PrivateSubnet2}
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRoute:
    DependsOn: [PublicRouteTable, AttachGateway]
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: InternetGateway}
      RouteTableId: {Ref: PublicRouteTable}
    Type: AWS::EC2::Route
  PublicRouteTable:
    DependsOn: [VPC, AttachGateway]
    Properties:
      Tags:
      - {Key: Name, Value: PublicRouteTable}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - {'Fn::GetAZs': ''}
      CidrBlock:
        Fn::FindInMap: [CidrMappings, public-subnet-1, CIDR]
      Tags:
      - {Key: Name, Value: PublicSubnet1}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    DependsOn: [PublicRouteTable, PublicSubnet1, AttachGateway]
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      SubnetId: {Ref: PublicSubnet1}
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - {'Fn::GetAZs': ''}
      CidrBlock:
        Fn::FindInMap: [CidrMappings, public-subnet-2, CIDR]
      Tags:
      - {Key: Name, Value: PublicSubnet2}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::Subnet
  PublicSubnet2RouteTableAssociation:
    DependsOn: [PublicRouteTable, PublicSubnet2, AttachGateway]
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      SubnetId: {Ref: PublicSubnet2}
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    Properties:
      CidrBlock:
        Fn::FindInMap: [CidrMappings, vpc, CIDR]
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - {Key: Name, Value: workshop-vpc}
    Type: AWS::EC2::VPC
  VPCDHCPOptionsAssociation:
    Properties:
      DhcpOptionsId: {Ref: DHCPOptions}
      VpcId: {Ref: VPC}
    Type: AWS::EC2::VPCDHCPOptionsAssociation
  WorkstationSG:  
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupName: Workstation to Push images
        GroupDescription: EC2 SecurityGroup
        VpcId: {Ref: VPC}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: '0.0.0.0/0'
  Cloud9Instance:
    Properties:
      Name : workshop-ide
      SubnetId: {Ref: PublicSubnet1} 
      Description: Use this to work with the fx-trader application
      InstanceType: t3.large
      Repositories:
        - RepositoryUrl: https://github.com/olileach/fx-trader-workshop
          PathComponent: fx-trader-workshop
      Tags:
      - Key: filter
        Value: cloud9-workshop-instance
      - Key: Cloud9SSMBootstrap
        Value: Active
    Type: AWS::Cloud9::EnvironmentEC2
  Cloud9IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cloud9-iam-role-${AWS::Region}
      MaxSessionDuration: 43200
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "ssm.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub cloud9-iam-instancr-profile-${AWS::Region}
      Path: "/"
      Roles:
      - Ref: Cloud9IamRole

######## Cloud9 Bootsrap Lambda ########

  Cloud9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::Cloud9BootstrapInstanceLambda
    DependsOn:
    - WorkshopLambdaFunction
    - Cloud9Instance
    - Cloud9InstanceProfile
    - WorkshopLambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: immersion-day-workshop
      ServiceToken:
        Fn::GetAtt:
        - WorkshopLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: Cloud9Instance
      Cloud9Instance:
        Ref: Cloud9Instance
      Cloud9InstanceProfileName:
        Ref: Cloud9InstanceProfile
      Cloud9InstanceProfileArn:
        Fn::GetAtt:
        - Cloud9InstanceProfile
        - Arn
      FxTraderS3Bucket: 
        Ref: FxTraderS3Bucket

  WorkshopLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: workshop-cfn-lambda
      Tags:
        - Key: Environment
          Value: Workshop Immersion Day
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - WorkshopLambdaExecutionRole
        - Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          
          def lambda_handler(event, context):
              logger.info('event: {}'.format(event))
              logger.info('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS
              
              if event['RequestType'] == 'Delete':
                  
                  s3 = boto3.resource('s3')
                  s3_list = []
                  s3_list.append(event['ResourceProperties']['FxTraderS3Bucket'])
                  for s3_bucket in s3_list:
                      logger.info(f'S3 bucket {s3_bucket}')
                      logger.info('Deleting S3 bucket contents.')
                      bucket = s3.Bucket(s3_bucket)
                      delete_objects(bucket)
                      logger.info(f'Deleted all S3 bucket contents for {s3_bucket}.')
                      s3.Bucket(s3_bucket).objects.all().delete()

                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')              
          
              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      logger.info('Creating EC2 client')
                      ec2 = boto3.client('ec2')
                      logger.info('EC2 client created: {}'.format(ec2))
                      
                      # Get the InstanceId of the Cloud9 IDE
                      logger.info('Getting InstanceId for Cloud9 IDE')
                      response = ec2.describe_instances(
                        Filters=[
                                  {
                                    'Name': 'tag:filter',
                                    'Values': ['cloud9-workshop-instance']
                                  },
                                  { 
                                    'Name': 'instance-state-name',
                                    'Values': ['running']
                                  }
                                ] 
                      )

                      InstanceId =response['Reservations'][0]['Instances'][0]['InstanceId']
                      logger.info('Instance ID: {}'.format(InstanceId))
                      InstanceIdList = []
                      InstanceIdList.append(InstanceId)

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['Cloud9InstanceProfileArn'],
                          'Name': event['ResourceProperties']['Cloud9InstanceProfileName']
                      }
                      logger.info('IAM Instance Profile Dict: {}'.format(iam_instance_profile))
          
                      # Wait for Instance to become ready before adding Role
                      instance_runner_waiter = ec2.get_waiter('instance_running')
                      instance_runner_waiter.wait(InstanceIds=InstanceIdList)

                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=InstanceId)
                      
                      # Update cloud9 environment to disable aws credentials - does not work
                      # not owner of the cloud9 instance.

                      #client = boto3.client('cloud9')
                      #res=client.list_environments()
                      #c9_env=res['environmentIds'][0]
                      #client.update_environment(
                      #    environmentId=c9_env,
                      #    managedCredentialsAction='DISABLE'
                      #)

                      responseData = {'Success': 'Cloud9 EC2 instance bootstrapped:' +  InstanceId}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
                      
                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {'Error': traceback.format_exc(e)}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
          
          def delete_objects(bucket):

              keys = []
              for version in bucket.object_versions.all():
                  if version.object_key not in keys:
                      keys.append(version.object_key)
              for key in keys:
                  bucket.object_versions.filter(Prefix=key).delete()


######## workshop cfn lambda role ########

  WorkshopLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName : !Sub workshop-lambda-iam-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - workshop-lambda-policy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - cloud9:DescribeEnvironments
            - cloud9:ListEnvironments
            - cloud9:UpdateEnvironment
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - !Sub "arn:aws:s3:::fx-trader-${AWS::AccountId}-${AWS::Region}-bucket"
            - !Sub "arn:aws:s3:::fx-trader-${AWS::AccountId}-${AWS::Region}-bucket/*"

  FxTraderLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: fx-trade-results
      Tags:
        - Key: Environment
          Value: Workshop Immersion Day
      Handler: results.handler
      Role:
        Fn::GetAtt:
        - FxTraderLambdaExecutionRole
        - Arn
      Runtime: python3.9
      MemorySize: 1024
      Timeout: "600"
      Code:
        ZipFile: |
          def handler(event, context):
            print(event)
      Environment:
        Variables:
          FX_TRADE_STREAM: !Ref FxTraderKinesisSteam

######## fx-trader-results lambda role ########

  FxTraderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName : !Sub fx-trader-lambda-iam-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - fx-trader-lambda-policy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:GetLogEvents
            - logs:FilterLogEvents
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:PutLogEvents
            Resource: 
            - arn:aws:logs:*:*:log-group:*
            - arn:aws:logs:*:*:log-group:*:*:*
          - Effect: Allow
            Action:
            - kinesis:PutRecord
            Resource: !Sub "arn:aws:kinesis:*:${AWS::AccountId}:stream/${FxTraderKinesisSteam}"

  FxTraderKinesisSteam:
    Type: AWS::Kinesis::Stream
    Properties: 
      Name: fx-trades-stream
      RetentionPeriodHours: 24
      StreamModeDetails: 
        StreamMode: ON_DEMAND
      Tags: 
        - Key: Environment
          Value: AWS Example

  FxTraderS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "fx-trader-${AWS::AccountId}-${AWS::Region}-bucket"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256

  FxTraderGlueDatabase:
    Type: AWS::Glue::Database
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseInput: 
        Description: "FX Trader AWS Glue Database."
        Name: !Ref FxTraderDatabaseName

  FxTraderTable:
      Type: "AWS::Glue::Table"
      DependsOn: FxTraderGlueDatabase
      Properties:
        CatalogId: !Ref AWS::AccountId
        DatabaseName: !Ref FxTraderDatabaseName
        TableInput:
          Description: "FX Trader AWS Glue Table."
          TableType: "EXTERNAL_TABLE"
          Name: !Ref FxTraderTableName
          StorageDescriptor:
            InputFormat: "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat"
            OutputFormat: "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat"
            Location: !Sub "s3://${FxTraderS3Bucket}/fx-trader-example/parquet/"
            SerdeInfo:
              Name: !Ref FxTraderTableName
              SerializationLibrary: "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
              Parameters: {
                "serialization.format" : 1
              } 

  FxTraderGlueIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName : !Sub fx-trader-example-aws-glue-iam-role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  FxTraderGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Role: !Ref FxTraderGlueIamRole
      Name: "fx-trader-example"
      GlueVersion: 3.0
      NumberOfWorkers: 2
      WorkerType: G.1X
      Command: 
        Name: gluestreaming
        ScriptLocation: !Sub "s3://${FxTraderS3Bucket}/fx-trader-example/scripts/fx-trader-example.py"
      Description: "FX Trader AWS Glue Job workshop demo."
      DefaultArguments:
        "--TempDir" : !Sub "s3://${FxTraderS3Bucket}/fx-trader-example/temp/"

  FxTraderAthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties: 
      Description: "Fx Trader Athena workgroup"
      Name: fx-trader-workgroup
      RecursiveDeleteOption: true
      State: ENABLED
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: "s3://${FxTraderS3Bucket}/Athena"